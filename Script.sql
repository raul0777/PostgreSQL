/* FUNCOES DE AGREGACAO */

/* QUERY SIMPLES */

SELECT * FROM FUNCIONARIOS;
SELECT * FROM DEPARTAMENTOS;

/* CONTANDO O NUMERO DE OCORENCIAS */

SELECT COUNT(*) FROM FUNCIONARIOS;
SELECT COUNT(*) FROM DEPARTAMENTOS;
SELECT COUNT(*) FROM LOCALIZACAO;

/* AGRUPANDO POR SEXO COM GROUP BY */

SELECT COUNT(*) FROM FUNCIONARIOS
GROUP BY SEXO;

/* COLOCANDO O NOME DA COLUNA */

SELECT SEXO, COUNT(*) AS "QUANTIDADES" FROM FUNCIONARIOS
GROUP BY SEXO;

/* MOSTRANDO O NUMERO DE FUNCIONARIOS EM CADA DEPARTAMENTO */

SELECT DEPARTAMENTO, COUNT(*)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;

/* EXIBINDO O MAXIMO DE SALARIOS - 149929 */

SELECT MAX(SALARIO) AS "SALARIO MAXIMO" FROM FUNCIONARIOS;

/* EXIBINDO O MINIMO DE SALARIO - 40138 */

SELECT MIN(SALARIO) AS "SALARIO MENOR" FROM FUNCIONARIOS;

/*EXIBINDO O MAXIMO E O MINIMO DE CADA DEPARTAMENTO */

SELECT DEPARTAMENTO, MIN(SALARIO), MAX(SALARIO)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;

/* EXIBINDO O MAXIMO E O MINIMO POR SEXO */

SELECT SEXO, MIN(SALARIO), MAX(SALARIO)
FROM FUNCIONARIOS
GROUP BY SEXO;

/* ESTATISTICAS */

/* MOSTRANDO UMA QUANTIDADE LIMITADA DE LINHAS */

SELECT * FROM FUNCIONARIOS
LIMIT 10;

/* QUAL O GASTO TOTAL DE SALARIO PAGO PELA EMPRESA? */

SELECT SUM(SALARIO) FROM FUNCIONARIOS;

/* QUAL O MONTANTE TOTAL QUE CADA DEPARTAMENTO RECEBE DE SALARIO */
SELECT DEPARTAMENTO, SUM(SALARIO)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;

/* POR DEPARTAMENTO, QUAL E O TOTAL E A MEDIA PAGA PARA OS FUNCIONARIOS? */

SELECT SUM(SALARIO), AVG(SALARIO)
FROM FUNCIONARIOS;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO;

/* ORDENANDO */

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO
ORDER BY 3;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO
ORDER BY 3 ASC;

SELECT DEPARTAMENTO, SUM(SALARIO), AVG(SALARIO)
FROM FUNCIONARIOS
GROUP BY DEPARTAMENTO
ORDER BY 3 DESC;

/* MODELAGEM BANCO DE DADOS X DATA SCIENCE 

BANCO DE DADOS -> 1,2 E 3 FORMAS NORMAIS
EVITAR REDUNDANCIA, CONSEQUENTEMENTE POUPAM ESPAÇO EM DISCO.
CONSOME MUITO PROCESAMENTO EM FUNÇAO DE JOINS. QUERIES LENTAS

DATA SCENCE E B.I -> FOCAM EM AGREGAÇOES E PERFORMACE.
NAO SE PREOCUPAM COM ESPACO EM DISCO. 
EM B.I MODELAGEM MINIMAL (DW) EM DATA SCIENCE, PREFERENCIALMENTE MODELAGEM COLUNA

O SERVIDOR DE MAQUINAS GEROY UM ARQUIVO DE LOG CSV.
VAMOS IMPORTA-LO E ANALISA-LO DENTRO DO NOSSO BANCO */

/* IMPORTANDO CSV */

CREATE TABLE MAQUINAS(
	MAQUINA VARCHAR(20),
	DIA INT,
	QTD NUMERIC(10,2)
);

Z:\LogMaquinas.csv

COPY MAQUINAS
FROM 'Z:\LogMaquinas.csv'
DELIMITER ','
CSV HEADER;

SELECT * FROM MAQUINAS;

/* QUAL MEDIDA DE CADA MAQUINA */

SELECT MAQUINAS, AVG(QTD) AS MEDIA_QTD
FROM MAQUINAS
GROUP BY MAQUINAS
ORDER BY 2 DESC;

/* AREDONDAMENTO */

ROUND(COLUNA,2)
SELECT MAQUINA, ROUND(AVG(QTD),2) AS MEDIA_QTD
FROM MAQUINAS
GROUP BY MAQUINA
ORDER BY 2 DESC;

/* QUAL A MODA DAS QUANTIDADES */

SELECT MAQUINA, QTD, COUNT(*) AS MODA
FROM MAQUINAS
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC;

/* QUAL A MODA DAS QUANTIDADES DE CADA MAQUINA */

SELECT MAQUINA, QTD, COUNT(*) FROM MAQUINAS
WHERE MAQUINA = 'Maquina 01'
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC
LIMIT 1;

SELECT MAQUINA, QTD, COUNT(*) FROM MAQUINAS
WHERE MAQUINA = 'Maquina 02'
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC
LIMIT 1;

SELECT MAQUINA, QTD, COUNT(*) FROM MAQUINAS
WHERE MAQUINA = 'Maquina 03'
GROUP BY MAQUINA, QTD
ORDER BY 3 DESC
LIMIT 1;

/* MODA DO DATASET INTERO */

SELECT QTD, COUNT(*) AS MODA
FROM MAQUINAS
GROUP BY QTD
ORDER BY 2 DESC;

/* QUAL O MAXIMO E MINIMO E AMPLITUDE DE CADA MAQUINA */

SELECT MAQUINA,
		MAX(QTD) AS MAXIMO,
		MIN(QTD) AS MINIMO,
		MAX(QTD) - MIN(QTD) AS AMPLITUDE
		FROM MAQUINAS
		GROUP BY MAQUINA
		ORDER BY 2 DESC;

/* ACRESCENTA AS MEDIA AO RELATORIO */

SELECT MAQUINA,
		ROUND(AVG(QTD),2) AS MEDIA,
		MAX(QTD) AS MAXIMO,
		MIN(QTD) AS MINIMO,
		MAX(QTD) - MIN(QTD) AS AMPLITUDE
		FROM MAQUINAS
		GROUP BY MAQUINA
		ORDER BY 4 DESC;

/* DESVIO PADRAO E VARIANCIA */

STDDEV_POP(COLUNA)
VAR_POP(COLUNA)

SELECT MAQUINA,
			ROUND(AVG(QTD),2) AS MEDIA,
			MAX(QTD) AS MAXIMO,
			MIN(QTD) AS MINIMO,
			MAX(QTD) - MIN(QTD) AS AMPLITUDE,
			ROUND(STDDEV_POP(QTD),2) AS DESV_PAD,
			ROUND(VAR_POP(QTD),2) AS VARIANCIA
			FROM MAQUINAS
			GROUP BY MAQUINA
			ORDER BY 4 DESC;

/* CALCULADOR DE VARIANCIA */

CREATE OR REPLACE FUNCTION _final_median(NUMERIC[])
   RETURNS NUMERIC AS
$$
   SELECT AVG(val)
   FROM (
     SELECT val
     FROM unnest($1) val
     ORDER BY 1
     LIMIT  2 - MOD(array_upper($1, 1), 2)
     OFFSET CEIL(array_upper($1, 1) / 2.0) - 1
   ) sub;
$$
LANGUAGE 'sql' IMMUTABLE;
								 
CREATE AGGREGATE median(NUMERIC) (
  SFUNC=array_append,
  STYPE=NUMERIC[],
  FINALFUNC=_final_median,
  INITCOND='{}'
);		
										 
SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS;

SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS
WHERE MAQUINA = 'Maquina 01';
								
SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS
WHERE MAQUINA = 'Maquina 02';
										 
SELECT MEDIAN(QTD) AS MEDIANA
FROM MAQUINAS
WHERE MAQUINA = 'Maquina 03';
										 
INSERT INTO MAQUINAS VALUES('Maquina 01',11,15.9);
INSERT INTO MAQUINAS VALUES('Maquina 02',11,15.4);
INSERT INTO MAQUINAS VALUES('Maquina 03',11,15.7);
INSERT INTO MAQUINAS VALUES('Maquina 01',12,30);
INSERT INTO MAQUINAS VALUES('Maquina 02',12,24);
INSERT INTO MAQUINAS VALUES('Maquina 03',12,45);
										 
delete from maquinas where dia = 11 or dia = 12;

/*FUNCAO E ANALISE DE MEDIANA NO ARQUIVO 02 - FUNCAO DE MEDIANA.SQL 

			QUANTIDADE
			TOTAL
			MEDIA
			MAXIMO
			MINIMO
			AMPLITUDE
			VARIANCIA
			DESVIO PADRAO
			MEDIANA
			COEF VAR.
*/

SELECT MAQUINA,
		COUNT(QTD) AS "QUANTIDADE",
		SUM(QTD) AS "TOTAL",
		ROUND(AVG(QTD),2) AS "MEDIA",
		MAX(QTD) AS "MAXIMO",
		MIN(QTD) AS "MINIMO",
		MAX(QTD) - MIN(QTD) AS " AMPLIT. TOTAL",
		ROUND(VAR_POP(QTD),2) AS "VARIANCIA",
		ROUND(STDDEV_POP(QTD),2) AS "DESV. PADRAO",
		ROUND(MEDIAN(QTD),2) AS "MEDIANA",
		ROUND((STDDEV_POP(QTD) / AVG(QTD)) * 100,2) AS "COEF. VARIACAO"
		FROM MAQUINAS
		GROUP BY MAQUINA
		ORDER BY 1;

DELETE FROM MAQUINAS WHERE DIA = 11 OR DIA = 12;

/* MODA -MODE() WITHIN GROUP(ORDER BY COLUNA) */

SELECT * FROM MAQUINAS;

SELECT MODE() WITHIN GROUP(ORDER BY QTD) AS "MODA" FROM MAQUINAS;

SELECT MAQUINA, MODE() WITHIN GROUP(ORDER BY QTD) AS "MODA"
FROM MAQUINAS
GROUP BY MAQUINA;

		SELECT MAQUINA,
		COUNT(QTD) AS "QUANTIDADE",
		SUM(QTD) AS "TOTAL",
		ROUND(AVG(QTD),2) AS "MEDIA",
		MAX(QTD) AS "MAXIMO",
		MIN(QTD) AS "MINIMO",
		MAX(QTD) - MIN(QTD) AS " AMPLIT. TOTAL",
		ROUND(VAR_POP(QTD),2) AS "VARIANCIA",
		ROUND(STDDEV_POP(QTD),2) AS "DESV. PADRAO",
		ROUND(MEDIAN(QTD),2) AS "MEDIANA",
		ROUND((STDDEV_POP(QTD) / AVG(QTD)) * 100,2) AS "COEF. VARIACAO",
		MODE() WITHIN GROUP(ORDER BY QTD) AS "MODA"
		FROM MAQUINAS
		GROUP BY MAQUINA
		ORDER BY 1;

/* CREATE TABLE AS SELECT 

PODEMOS CRIAR UMA TABELA COM O RESULTADO DE UMA QUERIE
E ESSA E A FORMA DE REALIZAR UMA MODELAGEM COLUNAR
CREATE TABLE SELECT */

CREATE TABLE GENERO(
		IDGENERO INT PRIMARY KEY,
		NOME VARCHAR(30)
);

INSERT INTO GENERO VALUES(1,'FANTASIA');
INSERT INTO GENERO VALUES(2,'AVENTURA');
INSERT INTO GENERO VALUES(3,'SUSPENSE');
INSERT INTO GENERO VALUES(4,'AÇAO');
INSERT INTO GENERO VALUES(5,'DRAMA');

SELECT * FROM GENERO;

CREATE TABLE FILME(
	IDFILME INT PRIMARY KEY,
	NOME VARCHAR(50),
	ANO INT,
	ID_GENERO INT,
	FOREIGN KEY(ID_GENERO)
	REFERENCES GENERO(IDGENERO)
);

INSERT INTO FILME VALUES(100,'KILL BILL I',2007,2);
INSERT INTO FILME VALUES(200,'DRACULA',1998,3);
INSERT INTO FILME VALUES(300,'SENHOR DOS ANES',2008,1);
INSERT INTO FILME VALUES(400,'UM SONHO DE LIBERDADE',2008,5);
INSERT INTO FILME VALUES(500,'OS BAD BOYS',2008,4);
INSERT INTO FILME VALUES(600,'GUERRA CIVIL',2016,2);
INSERT INTO FILME VALUES(700,'CADILLAC RECORDS',2009,5);
INSERT INTO FILME VALUES(800,'O HOBBIT',2008,1);
INSERT INTO FILME VALUES(900,'TOMATES VERDES FRITOS',2008,5);
INSERT INTO FILME VALUES(1000,'CORRIDA MORTAL',2008,4);

SELECT * FROM FILME;

CREATE TABLE LOCACAO(
	IDLOCACAO INT PRIMARY KEY,
	DATA DATE,
	MIDIA INT,
	DIAS INT,
	ID_FILME INT,
	FOREIGN KEY(ID_FILME)
	REFERENCES FILME(IDFILME)
);

INSERT INTO LOCACAO VALUES(1,'01/08/2019',23,3,100);
INSERT INTO LOCACAO VALUES(2,'01/02/2019',59,1,400);
INSERT INTO LOCACAO VALUES(3,'02/07/2019',23,3,400);
INSERT INTO LOCACAO VALUES(4,'02/02/2019',43,1,500);
INSERT INTO LOCACAO VALUES(5,'02/02/2019',23,2,100);
INSERT INTO LOCACAO VALUES(6,'03/07/2019',76,3,700);
INSERT INTO LOCACAO VALUES(7,'03/02/2019',45,1,700);
INSERT INTO LOCACAO VALUES(8,'04/08/2019',89,3,100);
INSERT INTO LOCACAO VALUES(9,'04/02/2019',23,3,800);
INSERT INTO LOCACAO VALUES(10,'05/07/2019',23,3,500);
INSERT INTO LOCACAO VALUES(11,'05/02/2019',38,3,800);
INSERT INTO LOCACAO VALUES(12,'01/10/2019',56,1,100);
INSERT INTO LOCACAO VALUES(13,'06/12/2019',23,3,400);
INSERT INTO LOCACAO VALUES(14,'01/02/2019',56,2,300);
INSERT INTO LOCACAO VALUES(15,'04/10/2019',76,3,300);
INSERT INTO LOCACAO VALUES(16,'01/09/2019',32,2,400);
INSERT INTO LOCACAO VALUES(17,'08/02/2019',89,3,200);
INSERT INTO LOCACAO VALUES(18,'01/02/2019',23,1,200);
INSERT INTO LOCACAO VALUES(19,'08/09/2019',45,3,300);
INSERT INTO LOCACAO VALUES(20,'01/12/2019',89,1,400);
INSERT INTO LOCACAO VALUES(21,'09/07/2019',23,3,1000);
INSERT INTO LOCACAO VALUES(22,'01/12/2019',21,3,1000);
INSERT INTO LOCACAO VALUES(23,'01/02/2019',34,2,100);
INSERT INTO LOCACAO VALUES(24,'09/08/2019',67,1,1000);
INSERT INTO LOCACAO VALUES(25,'01/02/2019',76,3,1000);
INSERT INTO LOCACAO VALUES(26,'01/02/2019',66,3,200);
INSERT INTO LOCACAO VALUES(27,'09/12/2019',90,1,400);
INSERT INTO LOCACAO VALUES(28,'03/02/2019',23,3,100);
INSERT INTO LOCACAO VALUES(29,'01/12/2019',65,5,1000);
INSERT INTO LOCACAO VALUES(30,'03/08/2019',43,1,1000);
INSERT INTO LOCACAO VALUES(31,'01/02/2019',27,31,200);

SELECT * FROM LOCACAO;

SELECT F.NOME, G.NOME, L.DATA, L.DIAS, L.MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

SELECT * FROM FUNCIONARIOS;

CREATE TABLE REL_LOCADORA AS
SELECT F.NOME, AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA
AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

SELECT * FROM REL_LOCADORA;

COPY REL_LOCADORA TO
'Z:\REL_LOCADORA.csv'
DELIMITER ';'
CSV HEADER;

/* SINCRONIZANDO TABELAS E RELATORIOS */

DROP TABLE LOCACAO;

CREATE TABLE LOCACAO(
	IDLOCACAO INT PRIMARY KEY,
	DATA DATE,
	MIDIA INT,
	DIAS INT,
	ID_FILME INT,
	FOREIGN KEY(ID_FILME)
	REFERENCES FILME(IDFILME)
);

CREATE SEQUENCE SEQ_LOCACAO;

NEXTVAL('SEQ_LOCACAO');

INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/08/2019',23,3,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2019',59,1,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'02/07/2019',23,3,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'02/02/2019',43,1,500);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'02/02/2019',23,2,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/07/2019',76,3,700);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/02/2019',45,1,700);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'04/08/2019',89,3,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'04/02/2019',23,3,800);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'05/07/2019',23,3,500);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'05/02/2019',38,3,800);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/10/2019',56,1,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'06/12/2019',23,3,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2019',56,2,300);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'04/10/2019',76,3,300);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/09/2019',32,2,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'08/02/2019',89,3,200);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2019',23,1,200);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'08/09/2019',45,3,300);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/12/2019',89,1,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'09/07/2019',23,3,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/12/2019',21,3,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2019',34,2,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'09/08/2019',67,1,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2019',76,3,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2019',66,3,200);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'09/12/2019',90,1,400);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/02/2019',23,3,100);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/12/2019',65,5,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'03/08/2019',43,1,1000);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),'01/02/2019',27,3,200);

SELECT * FROM LOCACAO;
SELECT * FROM GENERO;
SELECT * FROM FILME;
SELECT * FROM REL_LOCADORA;

DROP TABLE REL_LOCADORA;

SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA
AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

CREATE TABLE RELATORIO_LOCADORA AS
SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA
AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME;

SELECT * FROM RELATORIO_LOCADORA;
SELECT * FROM LOCACAO;

/* SELECT PARA TRAZER OS REGISTROS NOVOS */

SELECT MAX(IDLOCACAO) AS RELATORIO, (SELECT MAX(IDLOCACAO) FROM LOCACAO) AS LOCACAO
FROM RELATORIO_LOCADORA;

SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA
AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME
WHERE IDLOCACAO NOT IN (SELECT IDLOCACAO FROM RELATORIO_LOCADORA);

/* INSERT OS REGISTROS NOVOS */

INSERT INTO RELATORIO_LOCADORA
SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA
AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME
WHERE IDLOCACAO NOT IN (SELECT IDLOCACAO FROM RELATORIO_LOCADORA);

SELECT MAX(IDLOCACAO) AS RELATORIO, (SELECT MAX(IDLOCACAO) FROM LOCACAO) AS LOCACAO
FROM RELATORIO_LOCADORA;

/* VAMOS DEIXAR ESSE PROCEDIMENTO AUTOMATICO POR MEIO DE UMA TRIGGER */

CREATE OR REPLACE FUNCTION ATUALIZAR_REL()
RETURNS TRIGGER AS $$
BEGIN
INSERT INTO RELATORIO_LOCADORA
SELECT L.IDLOCACAO, F.NOME AS FILME, G.NOME AS GENERO, L.DATA AS DATA, L.DIAS AS DIAS, L.MIDIA
AS MIDIA
FROM GENERO G
INNER JOIN FILME F
ON G.IDGENERO = F.ID_GENERO
INNER JOIN LOCACAO L
ON L.ID_FILME = F.IDFILME
WHERE IDLOCACAO NOT IN (SELECT IDLOCACAO FROM RELATORIO_LOCADORA);

COPY RELATORIO_LOCADORA TO
'Z:\RELATORIO_LOCADORA.csv'
DELIMITER ';'
CSV HEADER;

RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

/* COMANDO PARA APAGAR UMA TRIGGER */

DROP TRIGGER TG_RELATORIO ON LOCACAO;

CREATE TRIGGER TG_RELATORIO
AFTER INSERT ON LOCACAO
FOR EACH ROW
	EXECUTE PROCEDURE ATUALIZAR_REL();

/* INSERINDO NOVOS REGISTROS */

INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),NOW(),100,7,300);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),NOW(),500,1,200);
INSERT INTO LOCACAO VALUES(NEXTVAL('SEQ_LOCACAO'),NOW(),800,6,500);

SELECT * FROM LOCACAO;
SELECT * FROM RELATORIO_LOCADORA;

/* SINCRONIZANDO COM REGISTROS DELETADOS */

CREATE OR REPLACE FUNCTION DELETE_LOCACAO()
RETURNS TRIGGER AS
$$
BEGIN

DELETE FROM RELATORIO_LOCADORA
WHERE IDLOCACAO = OLD.IDLOCACAO;

COPY RELATORIO_LOCADORA TO
'Z:\RELATORIO_LOCADORA.csv'
DELIMITER ';'
CSV HEADER;

RETURN NEW;
END;
$$
LANGUAGE PLPGSQL;

CREATE TRIGGER DELETE_REG
		BEFORE DELETE ON LOCACAO
		FOR EACH ROW
		EXECUTE PROCEDURE DELETE_LOCACAO();

SELECT * FROM LOCACAO;
SELECT * FROM RELATORIO_LOCADORA;

DELETE FROM LOCACAO
WHERE IDLOCACAO = 1;

/* QUAL A MODA DOS SALARIOS. A MODA DOS SALARIOS DIS ALGO RELEVANTE? */

SELECT SALARIO,
		COUNT(*) AS "QUANTIDADE",
		MAX(SALARIO) AS "SALARIO MAXIMO",
		MIN(SALARIO) AS "SALARIO MENOR",
		MAX(SALARIO) - MIN(SALARIO) AS " AMPLIT. TOTAL"
		FROM FUNCIONARIOS
		GROUP BY SALARIO
		LIMIT 10;

/* QUAL A MODA DEPARTAMENTAL = QUAL O DEPARTAMENTO QUE MAIS EMPREGA? */

SELECT DEPARTAMENTO,
		COUNT(*) AS "QUANTIDADE",
		MAX(SALARIO) AS "SALARIO MAXIMO",
		MIN(SALARIO) AS "SALARIO MENOR",
		MAX(SALARIO) - MIN(SALARIO) AS " AMPLIT. TOTAL"
		FROM FUNCIONARIOS
		GROUP BY DEPARTAMENTO
		LIMIT 1;

/* QUAL O DESVIO PADRAO DE CADA DEPARTAMENTO */

SELECT DEPARTAMENTO,
		COUNT(*) AS "QUANTIDADE"
		FROM FUNCIONARIOS
		GROUP BY DEPARTAMENTO;

/* QUAL A AMPLITUDE DE TODOS OS SALARIOS? */

SELECT DEPARTAMENTO,
		MAX(SALARIO) - MIN(SALARIO) AS " AMPLIT. TOTAL"
		FROM FUNCIONARIOS
		GROUP BY DEPARTAMENTO
		ORDER BY 2 DESC;

/* CALCULE AS PRINCIPAIS MEDIDAS ESTATISTICAS POR DEPARTAMENTO */
/* QUAL O DEPARTAMENTO TE DA UMA MAIOR PROBABILIDADE DE GANHAR MAIS? --OUTDOOR*/

SELECT DEPARTAMENTO,
		COUNT(*) AS "QUANTIDADE",
		MAX(SALARIO) AS "SALARIO MAXIMO",
		MIN(SALARIO) AS "SALARIO MENOR",
		MAX(SALARIO) - MIN(SALARIO) AS " AMPLIT. TOTAL"
		FROM FUNCIONARIOS
		GROUP BY DEPARTAMENTO
		ORDER BY 3 DESC;



/* VARIACOES DUNNY PARA MACHINA LEARNING */

/* UTILIZANDO O CASE */

SELECT NOME, SEXO FROM FUNCIONARIOS;

SELECT NOME, CARGO,
CASE
		WHEN CARGO = 'Financial Advisor' THEN 'Condicao 01'
		WHEN CARGO = 'Structural Engineer' THEN 'Condicao 02'
		WHEN CARGO = 'Executive Secretary' THEN 'Condicao 03'
		WHEN CARGO = 'Sale Associative' THEN 'Condicao 04'
		ELSE "OUTRAS CONDICOES"
END AS "CONDICOES"
FROM FUNCIONARIOS;

SELECT CARGO FROM FUNCIONARIOS;

SELECT NOME,
CASE
		WHEN SEXO = 'Masculino' THEN 'M'
		ELSE "F"
END AS "SEXO"
FROM FUNCIONARIOS;

/* UTILIZANDO VALORES BOOLEANOS */

SELECT NOME, CARGO, (SEXO = 'Masculino') AS MASCULINO, (SEXO = 'Feminino') AS FEMININO
FROM FUNCIONARIOS;

/* MESCALNDO AS TECNICAS - VARIABLE DUMMY PYTHON */

SELECT NAME, CARGO,
CASE
		WHEN (SEXO = 'Masculino') = TRUE THEN 1
		ELSE 0
END AS "MASCULINO"
CASE
		WHEN (SEXO = 'Feminino') = TRUE THEN 1
		ELSE 0
END AS "FEMININO"
FROM FUNCIONARIOS;

/* FILTROS DE GRUPOS */

/* FILTROS BASEADO EM VALORES NUMERICOS */

SELECT NOME, DEPARTAMENTO
FROM FUNCIONARIOS
WHERE SALARIO > 100000;

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE SALARIO > 100000;

/* FILTROS BASEADOS EM STRINGS */

SELECT NOME, DEPARTAMENTO, salario
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas';

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'FERRAMENTAS';

/* FILTROS BASEADOS EM MULTIPLOS TIPOS E COLUNAS - CONSIDERAR OR E AND 
EM RELACIONAMENTOS 1 X 1 O FILTRO AND TRATANDO DE UMA UNICA COLUNA SEMPRE DARA FALSO*/

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas'
AND
SALARIO > 100000;

/* FILTROS BASEADO EM UNICO TIPO E COLUNA - ATENCAO PARA A REGRA DO AND E OR */ 

SELECT NOME, DEPARTAMENTO, SALARIO
FROM FUNCIONARIOS
WHERE DEPARTAMENTO = 'Ferramentas'
AND
DEPARTAMENTO = 'Books';

/* FILTROS BASEADOS EM PADRAO DE CARACTERES */

SELECT DEPARTAMENTO, SUM(SALARIO) AS "TOTAL"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%'
GROUP BY DEPARTAMENTO;

/* FILTROS BASEADOS EM PADRAO DE CARACTERES COM MAIS LETRAS */

SELECT DEPARTAMENTO, SUM(SALARIO) AS "TOTAL"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'Be%'
GROUP BY DEPARTAMENTO;

/* UTILIZANDO O CARACTER CORRINGA NO MEIO DA PALAVRA */

SELECT DEPARTAMENTO, SUM(SALARIO) AS "TOTAL"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%s'
GROUP BY DEPARTAMENTO;

/* E SE EU QUISESSE FILTRAR O AGRUPAMENTO PELO SALARIO? POR EXEMPLO, MAIOR QUE 40.000.000 
COLUNAS NAO AGREGADAS - WHER 
COLUNAS AGREGADAS HAVING */

SELECT DEPARTAMENTO, SUM(SALARIO) AS "TOTAL"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%' AND SUM(SALARIO) > 40000000
GROUP BY DEPARTAMENTO;

SELECT DEPARTAMENTO, SUM(SALARIO) AS "TOTAL"
FROM FUNCIONARIOS
WHERE DEPARTAMENTO LIKE 'B%' 
GROUP BY DEPARTAMENTO
HAVING SUM(SALARIO) > 40000000;

/* MULTIPLOS CONTADORES */

SELECT COUNT(*) FROM FUNCIONARIOS;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT('Masculino') AS "Masculino"
FROM FUNCIONARIOS;

SELECT SEXO, COUNT(*)
FROM FUNCIONARIOS
WHERE SEXO = 'Masculino'
GROUP BY SEXO;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT(SELECT SEXO, COUNT(*)
FROM FUNCIONARIOS
WHERE SEXO = 'Masculino'
GROUP BY SEXO AS "Masculino"
FROM FUNCIONARIOS;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
(SELECT SEXO, COUNT(*)
FROM FUNCIONARIOS
WHERE SEXO = 'Masculino'
GROUP BY SEXO AS "Masculino"
FROM FUNCIONARIOS;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT(*) FILTER(WHERE SEXO = 'Masculino') AS "MASCULINO"
FROM FUNCIONARIOS;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT(*) FILTER(WHERE SEXO = 'Masculino') AS "MASCULINO",
COUNT(*) FILTER(WHERE DEPARTAMENTO = 'Books') AS "Books"
FROM FUNCIONARIOS;

SELECT COUNT(*) AS "QUANTIDADE TOTAL",
COUNT(*) FILTER(WHERE SEXO = 'Masculino') AS "MASCULINO",
COUNT(*) FILTER(WHERE DEPARTAMENTO = 'Books') AS "Books",
COUNT(*) FILTER(WHERE SALARIO > 140000) AS "SALARIO MAIOR QUE 140MIL"
FROM FUNCIONARIOS;

/* REFORMATANDO STRINGS */

/* LISTANDO */

SELECT DEPARTAMENTO FROM FUNCIONARIOS;

/* DISTINCT */

SELECT DISTINCT DEPARTAMENTO FROM FUNCIONARIOS;

/* UPPER CASE */

SELECT DISTINCT UPPER (DEPARTAMENTO) FROM FUNCIONARIOS;

/* LOWER CASE */

SELECT DISTINCT LOWER (DEPARTAMENTO) FROM FUNCIONARIOS;

/* CONCACTENANDO STRINGS */

SELECT CARGO || ' - ' || DEPARTAMENTO
FROM FUNCIONARIOS;

SELECT UPPER (CARGO || ' - ' || DEPARTAMENTO) AS "CARGO COMPLETO"
FROM FUNCIONARIOS;

/* REMOVER ESPACOS */

SELECT '      UNIDADOS      ';

/* CONTANDO CARACTERES */

SELECT LENGTH('      UNIDADOS      ');

/* APLICANDO TRIM */

SELECT TRIM('      UNIDADOS      ');

SELECT LENGTH(TRIM('      UNIDADOS      '));

/* DESAFIO - CRIAR UMA COLUNA AO LADO DA COLUNA CARGO QUE DIGA SE A PESSOA E ASSISTENTE OU NAO */

SELECT * FROM FUNCIONARIOS;

"Marketing Assistant"

SELECT NOME, DEPARTAMENTO, CARGO AS "Assistant"
FROM FUNCIONARIOS
WHERE CARGO LIKE '%Assistant%';

SELECT NOME, (CARGO LIKE '%Assistant%') AS "Assistant"
FROM FUNCIONARIOS;